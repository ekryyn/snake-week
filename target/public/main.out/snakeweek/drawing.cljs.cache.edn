{:rename-macros {}, :renames {}, :externs {p5 {prototype {push {}, noSmooth {}, pop {}, textSize {}, textFont {}, textAlign {}, text {}}}, window {innerWidth {}, innerHeight {}}}, :use-macros {go cljs.core.async.macros}, :excludes #{}, :name snakeweek.drawing, :imports nil, :requires {p play-cljs.core, play-cljs.core play-cljs.core, assets snakeweek.assets, snakeweek.assets snakeweek.assets, string clojure.string, clojure.string clojure.string, cljs.core.async cljs.core.async}, :cljs.spec/speced-vars [], :uses {<! cljs.core.async, promise-chan cljs.core.async, put! cljs.core.async}, :defs {sprites {:name snakeweek.drawing/sprites, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :line 17, :column 1, :end-line 17, :end-column 13, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :line 17, :column 6, :end-line 17, :end-column 13}, :tag cljs.core/IMap}, active? {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :line 165, :column 9, :end-line 165, :end-column 16, :arglists (quote ([i]))}, :name snakeweek.drawing/active?, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :end-column 16, :method-params ([i]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 165, :end-line 165, :max-fixed-arity 1, :fn-var true, :arglists (quote ([i]))}, create-menu {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :line 164, :column 7, :end-line 164, :end-column 18, :arglists (quote ([ct x y items active-id]))}, :name snakeweek.drawing/create-menu, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :end-column 18, :method-params ([ct x y items active-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 5, :fn-var true, :arglists (quote ([ct x y items active-id]))}, font-ready? {:name snakeweek.drawing/font-ready?, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :line 11, :column 1, :end-line 11, :end-column 17, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :line 11, :column 6, :end-line 11, :end-column 17}, :tag any}, draw-cell {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :line 87, :column 7, :end-line 87, :end-column 16, :arglists (quote ([[x y from to]]))}, :name snakeweek.drawing/draw-cell, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :end-column 16, :method-params ([p__14072]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[x y from to]]))}, draw-hud {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :line 119, :column 7, :end-line 119, :end-column 15, :arglists (quote ([{:keys [paused width height], :as state}]))}, :name snakeweek.drawing/draw-hud, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :end-column 15, :method-params ([p__14089]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [paused width height], :as state}]))}, draw-credits {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :line 137, :column 7, :end-line 137, :end-column 19, :arglists (quote ([]))}, :name snakeweek.drawing/draw-credits, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, draw-tail {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :line 78, :column 7, :end-line 78, :end-column 16, :arglists (quote ([[x y from to]]))}, :name snakeweek.drawing/draw-tail, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :end-column 16, :method-params ([p__14065]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[x y from to]]))}, draw-background {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :line 101, :column 7, :end-line 101, :end-column 22, :arglists (quote ([color]))}, :name snakeweek.drawing/draw-background, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :end-column 22, :method-params ([color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([color]))}, get-orientation {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :line 13, :column 7, :end-line 13, :end-column 22, :arglists (quote ([from to]))}, :name snakeweek.drawing/get-orientation, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :end-column 22, :method-params ([from to]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([from to]))}, draw-walls {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :line 129, :column 7, :end-line 129, :end-column 17, :arglists (quote ([wall-coords]))}, :name snakeweek.drawing/draw-walls, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :end-column 17, :method-params ([wall-coords]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 1, :fn-var true, :arglists (quote ([wall-coords]))}, draw-score {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :line 112, :column 7, :end-line 112, :end-column 17, :arglists (quote ([{:keys [score height]}]))}, :name snakeweek.drawing/draw-score, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :end-column 17, :method-params ([p__14086]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [score height]}]))}, UNIT {:name snakeweek.drawing/UNIT, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :line 8, :column 1, :end-line 8, :end-column 10, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :line 8, :column 6, :end-line 8, :end-column 10}, :tag number}, draw-head {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :line 69, :column 7, :end-line 69, :end-column 16, :arglists (quote ([[x y from to]]))}, :name snakeweek.drawing/draw-head, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :end-column 16, :method-params ([p__14058]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[x y from to]]))}, font-atom {:name snakeweek.drawing/font-atom, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :line 10, :column 1, :end-line 10, :end-column 15, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :line 10, :column 6, :end-line 10, :end-column 15}, :tag any}, draw-food {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :line 97, :column 7, :end-line 97, :end-column 16, :arglists (quote ([[x y ttl]]))}, :name snakeweek.drawing/draw-food, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :end-column 16, :method-params ([p__14079]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[x y ttl]]))}, draw-board {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :line 105, :column 7, :end-line 105, :end-column 17, :arglists (quote ([{:keys [width height]}]))}, :name snakeweek.drawing/draw-board, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/drawing.cljs", :end-column 17, :method-params ([p__14083]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [width height]}]))}}, :cljs.spec/registry-ref [], :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:y :active? :tail-south :west-south :paused :tail-west :tail-north :stroke :animation :color :west :south :head-north :head-west :name :sy :north-west :fill :value :wall :width :north-east :duration :east :menu-entry :south-west :font :size :center :tail-east :div :south-east :score :east-north :west-north :no-smooth :right :image :sx :head-east :x :head-south :east-south :rect :swidth :sheight :north :height :halign :left :text}, :order [:tail-south :west-south :tail-west :tail-north :west :south :head-north :head-west :north-west :wall :north-east :east :south-west :tail-east :south-east :east-north :west-north :head-east :head-south :east-south :north :no-smooth :menu-entry :x :y :value :size :active? :center :image :swidth :sheight :sx :sy :fill :color :rect :width :height :stroke :score :text :font :paused :div :halign :right :name :left :animation :duration]}, :doc nil}