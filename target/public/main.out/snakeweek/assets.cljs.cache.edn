{:rename-macros {}, :renames {}, :externs {Error {}, Object {}}, :use-macros {go cljs.core.async.macros}, :excludes #{}, :name snakeweek.assets, :imports nil, :requires {cljs.core.async cljs.core.async, p5.sound p5.sound}, :cljs.spec/speced-vars [], :uses {<! cljs.core.async, promise-chan cljs.core.async, put! cljs.core.async}, :defs {asset-names {:name snakeweek.assets/asset-names, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/assets.cljs", :line 8, :column 1, :end-line 8, :end-column 17, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/assets.cljs", :line 8, :column 6, :end-line 8, :end-column 17}, :tag cljs.core/IVector}, preloads {:name snakeweek.assets/preloads, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/assets.cljs", :line 19, :column 1, :end-line 19, :end-column 14, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/assets.cljs", :line 19, :column 6, :end-line 19, :end-column 14}, :tag any}, assets {:name snakeweek.assets/assets, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/assets.cljs", :line 20, :column 1, :end-line 20, :end-column 12, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/assets.cljs", :line 20, :column 6, :end-line 20, :end-column 12}, :tag any}, load-image! {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/assets.cljs", :line 22, :column 7, :end-line 22, :end-column 18, :arglists (quote ([renderer name]))}, :name snakeweek.assets/load-image!, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/assets.cljs", :end-column 18, :method-params ([renderer name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([renderer name]))}, load-sound! {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/assets.cljs", :line 28, :column 7, :end-line 28, :end-column 18, :arglists (quote ([renderer name]))}, :name snakeweek.assets/load-sound!, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/assets.cljs", :end-column 18, :method-params ([renderer name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([renderer name]))}, load-font! {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/assets.cljs", :line 34, :column 7, :end-line 34, :end-column 17, :arglists (quote ([renderer name]))}, :name snakeweek.assets/load-font!, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/assets.cljs", :end-column 17, :method-params ([renderer name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 2, :fn-var true, :arglists (quote ([renderer name]))}, load-asset! {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/assets.cljs", :line 40, :column 7, :end-line 40, :end-column 18, :arglists (quote ([renderer [type name]]))}, :name snakeweek.assets/load-asset!, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/assets.cljs", :end-column 18, :method-params ([renderer p__13923]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([renderer [type name]]))}, load-assets! {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/assets.cljs", :line 47, :column 7, :end-line 47, :end-column 19, :arglists (quote ([renderer]))}, :name snakeweek.assets/load-assets!, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/assets.cljs", :end-column 19, :method-params ([renderer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([renderer]))}, get-asset {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/assets.cljs", :line 58, :column 7, :end-line 58, :end-column 16, :arglists (quote ([name]))}, :name snakeweek.assets/get-asset, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/assets.cljs", :end-column 16, :method-params ([name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name]))}}, :cljs.spec/registry-ref [], :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:sound :else :recur :font :image}, :order [:font :sound :image :recur :else]}, :doc nil}