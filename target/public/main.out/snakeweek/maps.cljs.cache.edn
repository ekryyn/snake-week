{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name snakeweek.maps, :imports nil, :requires {assets snakeweek.assets, snakeweek.assets snakeweek.assets}, :cljs.spec/speced-vars [], :uses nil, :defs {box-hor-wall {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/maps.cljs", :line 5, :column 7, :end-line 5, :end-column 19, :arglists (quote ([width]))}, :name snakeweek.maps/box-hor-wall, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/maps.cljs", :end-column 19, :method-params ([width]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([width]))}, box-row {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/maps.cljs", :line 8, :column 7, :end-line 8, :end-column 14, :arglists (quote ([width]))}, :name snakeweek.maps/box-row, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/maps.cljs", :end-column 14, :method-params ([width]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([width]))}, box {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/maps.cljs", :line 11, :column 7, :end-line 11, :end-column 10, :arglists (quote ([w h]))}, :name snakeweek.maps/box, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/maps.cljs", :end-column 10, :method-params ([w h]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 2, :fn-var true, :arglists (quote ([w h]))}, to-coords {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/maps.cljs", :line 20, :column 7, :end-line 20, :end-column 16, :arglists (quote ([width height walls]))}, :name snakeweek.maps/to-coords, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/maps.cljs", :end-column 16, :method-params ([width height walls]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 3, :fn-var true, :arglists (quote ([width height walls]))}, walls {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/maps.cljs", :line 26, :column 7, :end-line 26, :end-column 12, :arglists (quote ([w h]))}, :name snakeweek.maps/walls, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/maps.cljs", :end-column 12, :method-params ([w h]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists (quote ([w h]))}, get-colors {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/maps.cljs", :line 33, :column 8, :end-line 33, :end-column 18, :private true, :arglists (quote ([pixels w h]))}, :private true, :name snakeweek.maps/get-colors, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/maps.cljs", :end-column 18, :method-params ([pixels w h]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 3, :fn-var true, :arglists (quote ([pixels w h]))}, load-map {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/maps.cljs", :line 42, :column 7, :end-line 42, :end-column 15, :arglists (quote ([asset-name]))}, :name snakeweek.maps/load-map, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/r3nb31/snakeweek/maps.cljs", :end-column 15, :method-params ([asset-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([asset-name]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:width :walls :height}, :order [:width :height :walls]}, :doc nil}