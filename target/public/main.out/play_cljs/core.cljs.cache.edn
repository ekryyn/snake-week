{:rename-macros {}, :renames {}, :externs {p5 {prototype {draw {}, NORMAL {}, rect {}, millis {}, disableFriendlyErrors {}, height {}, text {}, BOLD {}, clear {}, endShape {}, TOP {}, bezier {}, ITALIC {}, resizeCanvas {}, BOTTOM {}, stroke {}, push {}, textLeading {}, CENTER {}, triangle {}, arc {}, beginShape {}, HSB {}, scale {}, RIGHT {}, pop {}, fill {}, colorMode {}, loadTiledMap {}, beginContour {}, width {}, RGB {}, LEFT {}, textStyle {}, vertex {}, createCanvas {}, canvas {removeAttribute {}}, setup {}, textFont {}, noStroke {}, line {}, CLOSE {}, quad {}, loadImage {}, textSize {}, noFill {}, textAlign {}, curve {}, ellipse {}, BASELINE {}, createGraphics {}, translate {}, endContour {}, image {}, point {}}, Image {prototype {width {}, height {}}}, TiledMap {prototype {draw {}}}}, Error {}, window {}, KeyboardEvent {prototype {keyCode {}}}, Object {}}, :use-macros {go cljs.core.async.macros}, :excludes #{}, :name play-cljs.core, :imports nil, :requires {events goog.events, goog.events goog.events, p5.core p5.core, p5.tiled-map p5.tiled-map, cljs.core.async cljs.core.async}, :cljs.spec/speced-vars [], :uses {<! cljs.core.async, promise-chan cljs.core.async, put! cljs.core.async}, :defs {get-screen {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 47, :column 4, :end-line 47, :end-column 14, :protocol play-cljs.core/Game, :doc "Returns the [Screen](#Screen) object currently being displayed.", :arglists (quote ([game]))}, :protocol play-cljs.core/Game, :name play-cljs.core/get-screen, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 14, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game])), :doc "Returns the [Screen](#Screen) object currently being displayed."}, set-size {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 65, :column 4, :end-line 65, :end-column 12, :protocol play-cljs.core/Game, :doc "Sets the virtual width and height of the game.", :arglists (quote ([game width height]))}, :protocol play-cljs.core/Game, :name play-cljs.core/set-size, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 12, :method-params ([game width height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 65, :max-fixed-arity 3, :fn-var true, :arglists (quote ([game width height])), :doc "Sets the virtual width and height of the game."}, rgb-defaults {:name play-cljs.core/rgb-defaults, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 83, :column 1, :end-line 83, :end-column 26, :const true, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 83, :column 14, :end-line 83, :end-column 26, :const true}, :tag any}, get-canvas {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 53, :column 4, :end-line 53, :end-column 14, :protocol play-cljs.core/Game, :doc "Returns the internal canvas object.", :arglists (quote ([game]))}, :protocol play-cljs.core/Game, :name play-cljs.core/get-canvas, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 14, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game])), :doc "Returns the internal canvas object."}, pre-render {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 39, :column 4, :end-line 39, :end-column 14, :protocol play-cljs.core/Game, :doc "Renders the provided data structure off-screen and associates it with the given name. Returns an [Image](#Image) object.", :arglists (quote ([game image-name width height content]))}, :protocol play-cljs.core/Game, :name play-cljs.core/pre-render, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 14, :method-params ([game image-name width height content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 39, :max-fixed-arity 5, :fn-var true, :arglists (quote ([game image-name width height content])), :doc "Renders the provided data structure off-screen and associates it with the given name. Returns an [Image](#Image) object."}, ->t_play_cljs$core12215 {:protocol-inline nil, :meta {:anonymous true, :protocols #{play-cljs.core/Game cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([width height renderer hidden-state-atom setup-finished? preloads meta12216])), :file nil}, :protocols #{play-cljs.core/Game cljs.core/IMeta cljs.core/IWithMeta}, :name play-cljs.core/->t_play_cljs$core12215, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :method-params ([width height renderer hidden-state-atom setup-finished? preloads meta12216]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 381, :max-fixed-arity 7, :fn-var true, :arglists (quote ([width height renderer hidden-state-atom setup-finished? preloads meta12216])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, update-opts {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 74, :column 7, :end-line 74, :end-column 18, :arglists (quote ([opts parent-opts defaults]))}, :name play-cljs.core/update-opts, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 18, :method-params ([opts parent-opts defaults]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 3, :fn-var true, :arglists (quote ([opts parent-opts defaults]))}, load-image {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 41, :column 4, :end-line 41, :end-column 14, :protocol play-cljs.core/Game, :doc "Loads an image. Returns an [Image](#Image) object.", :arglists (quote ([game path]))}, :protocol play-cljs.core/Game, :name play-cljs.core/load-image, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 14, :method-params ([game path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 41, :max-fixed-arity 2, :fn-var true, :arglists (quote ([game path])), :doc "Loads an image. Returns an [Image](#Image) object."}, basic-defaults {:meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 80, :column 14, :end-line 80, :end-column 28, :const true}, :name play-cljs.core/basic-defaults, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 28, :const-expr {:op :map, :env {:context :expr}, :form {:x 0, :y 0, :scale-x 1, :scale-y 1}, :keys [{:op :constant, :env {:context :expr}, :form :x, :tag cljs.core/Keyword} {:op :constant, :env {:context :expr}, :form :y, :tag cljs.core/Keyword} {:op :constant, :env {:context :expr}, :form :scale-x, :tag cljs.core/Keyword} {:op :constant, :env {:context :expr}, :form :scale-y, :tag cljs.core/Keyword}], :vals [{:op :constant, :env {:context :expr}, :form 0, :tag number} {:op :constant, :env {:context :expr}, :form 0, :tag number} {:op :constant, :env {:context :expr}, :form 1, :tag number} {:op :constant, :env {:context :expr}, :form 1, :tag number}], :children [{:op :constant, :env {:context :expr}, :form :x, :tag cljs.core/Keyword} {:op :constant, :env {:context :expr}, :form 0, :tag number} {:op :constant, :env {:context :expr}, :form :y, :tag cljs.core/Keyword} {:op :constant, :env {:context :expr}, :form 0, :tag number} {:op :constant, :env {:context :expr}, :form :scale-x, :tag cljs.core/Keyword} {:op :constant, :env {:context :expr}, :form 1, :tag number} {:op :constant, :env {:context :expr}, :form :scale-y, :tag cljs.core/Keyword} {:op :constant, :env {:context :expr}, :form 1, :tag number}], :tag cljs.core/IMap}, :column 1, :const true, :line 80, :end-line 80, :tag cljs.core/IMap}, create-game {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 368, :column 7, :end-line 368, :end-column 18, :arglists (quote ([width height])), :doc "Returns a game object."}, :name play-cljs.core/create-game, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 18, :method-params ([width height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 368, :end-line 368, :max-fixed-arity 2, :fn-var true, :arglists (quote ([width height])), :doc "Returns a game object."}, valign->constant {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 89, :column 7, :end-line 89, :end-column 23, :arglists (quote ([renderer valign]))}, :name play-cljs.core/valign->constant, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 23, :method-params ([renderer valign]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 2, :fn-var true, :arglists (quote ([renderer valign]))}, get-width {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 61, :column 4, :end-line 61, :end-column 13, :protocol play-cljs.core/Game, :doc "Returns the virtual width of the game.", :arglists (quote ([game]))}, :protocol play-cljs.core/Game, :name play-cljs.core/get-width, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 13, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game])), :doc "Returns the virtual width of the game."}, get-asset {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 67, :column 4, :end-line 67, :end-column 13, :protocol play-cljs.core/Game, :doc "Gets the asset with the given name.", :arglists (quote ([game name]))}, :protocol play-cljs.core/Game, :name play-cljs.core/get-asset, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 13, :method-params ([game name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists (quote ([game name])), :doc "Gets the asset with the given name."}, get-height {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 63, :column 4, :end-line 63, :end-column 14, :protocol play-cljs.core/Game, :doc "Returns the virtual height of the game.", :arglists (quote ([game]))}, :protocol play-cljs.core/Game, :name play-cljs.core/get-height, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 14, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game])), :doc "Returns the virtual height of the game."}, on-show {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 24, :column 4, :end-line 24, :end-column 11, :protocol play-cljs.core/Screen, :doc "Runs once, when the screen first appears.", :arglists (quote ([this]))}, :protocol play-cljs.core/Screen, :name play-cljs.core/on-show, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Runs once, when the screen first appears."}, Game {:meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 31, :column 14, :end-line 31, :end-column 18, :doc "A game object contains the internal renderer object and various bits of state\nthat are important to the overall execution of the game. Every play-cljs game\nshould create just one such object by calling [create-game](#create-game).", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {get-screen [[game]], set-size [[game width height]], get-canvas [[game]], pre-render [[game image-name width height content]], load-image [[game path]], get-width [[game]], get-asset [[game name]], get-height [[game]], start [[game]], get-delta-time [[game]], get-pressed-keys [[game]], render [[game content]], load-tiled-map [[game map-name]], set-screen [[game screen]], get-total-time [[game]], get-renderer [[game]]}}}, :protocol-symbol true, :name play-cljs.core/Game, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 18, :column 1, :line 31, :protocol-info {:methods {get-screen [[game]], set-size [[game width height]], get-canvas [[game]], pre-render [[game image-name width height content]], load-image [[game path]], get-width [[game]], get-asset [[game name]], get-height [[game]], start [[game]], get-delta-time [[game]], get-pressed-keys [[game]], render [[game content]], load-tiled-map [[game map-name]], set-screen [[game screen]], get-total-time [[game]], get-renderer [[game]]}}, :info nil, :end-line 31, :tag any, :impls #{play-cljs.core/t_play_cljs$core12215}, :doc "A game object contains the internal renderer object and various bits of state\nthat are important to the overall execution of the game. Every play-cljs game\nshould create just one such object by calling [create-game](#create-game).", :jsdoc ("@interface")}, Screen {:meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 8, :column 14, :end-line 8, :end-column 20, :doc "A screen object provides the basic lifecycle for a game.\nSimple games may only need to have one screen. They are a useful way to\nisolate different aspects of your game. For example, you could make one\nscreen display the title and menu, and another screen contain the game\nitself.\n\nYou can create a screen by using `reify` like this:\n\n```\n(def main-screen\n  (reify p/Screen\n    (on-show [this])\n    (on-hide [this])\n    (on-render [this])))\n```", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {on-show [[this]], on-hide [[this]], on-render [[this]]}}}, :protocol-symbol true, :name play-cljs.core/Screen, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 20, :column 1, :line 8, :protocol-info {:methods {on-show [[this]], on-hide [[this]], on-render [[this]]}}, :info nil, :end-line 8, :tag any, :impls #{}, :doc "A screen object provides the basic lifecycle for a game.\nSimple games may only need to have one screen. They are a useful way to\nisolate different aspects of your game. For example, you could make one\nscreen display the title and menu, and another screen contain the game\nitself.\n\nYou can create a screen by using `reify` like this:\n\n```\n(def main-screen\n  (reify p/Screen\n    (on-show [this])\n    (on-hide [this])\n    (on-render [this])))\n```", :jsdoc ("@interface")}, start {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 35, :column 4, :end-line 35, :end-column 9, :protocol play-cljs.core/Game, :doc "Creates the canvas element.", :arglists (quote ([game]))}, :protocol play-cljs.core/Game, :name play-cljs.core/start, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 9, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game])), :doc "Creates the canvas element."}, get-delta-time {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 57, :column 4, :end-line 57, :end-column 18, :protocol play-cljs.core/Game, :doc "Returns the time since the last frame was rendered, in milliseconds.", :arglists (quote ([game]))}, :protocol play-cljs.core/Game, :name play-cljs.core/get-delta-time, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 18, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game])), :doc "Returns the time since the last frame was rendered, in milliseconds."}, on-hide {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 26, :column 4, :end-line 26, :end-column 11, :protocol play-cljs.core/Screen, :doc "Runs once, when the screen is no longer displayed.", :arglists (quote ([this]))}, :protocol play-cljs.core/Screen, :name play-cljs.core/on-hide, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Runs once, when the screen is no longer displayed."}, text-defaults {:name play-cljs.core/text-defaults, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 81, :column 1, :end-line 81, :end-column 27, :const true, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 81, :column 14, :end-line 81, :end-column 27, :const true}, :tag any}, hsb-defaults {:name play-cljs.core/hsb-defaults, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 84, :column 1, :end-line 84, :end-column 26, :const true, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 84, :column 14, :end-line 84, :end-column 26, :const true}, :tag any}, get-pressed-keys {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 59, :column 4, :end-line 59, :end-column 20, :protocol play-cljs.core/Game, :doc "Returns a set containing the key codes for the keys currently being pressed.", :arglists (quote ([game]))}, :protocol play-cljs.core/Game, :name play-cljs.core/get-pressed-keys, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 20, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game])), :doc "Returns a set containing the key codes for the keys currently being pressed."}, img-defaults {:name play-cljs.core/img-defaults, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 82, :column 1, :end-line 82, :end-column 26, :const true, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 82, :column 14, :end-line 82, :end-column 26, :const true}, :tag any}, on-render {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 28, :column 4, :end-line 28, :end-column 13, :protocol play-cljs.core/Screen, :doc "Runs each time the game is ready to render another frame.", :arglists (quote ([this]))}, :protocol play-cljs.core/Screen, :name play-cljs.core/on-render, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Runs each time the game is ready to render another frame."}, style->constant {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 92, :column 7, :end-line 92, :end-column 22, :arglists (quote ([renderer style]))}, :name play-cljs.core/style->constant, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 22, :method-params ([renderer style]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 2, :fn-var true, :arglists (quote ([renderer style]))}, draw-sketch! {:name play-cljs.core/draw-sketch!, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 95, :column 1, :end-line 95, :end-column 23, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 95, :column 11, :end-line 95, :end-column 23}, :tag cljs.core/MultiFn}, render {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 37, :column 4, :end-line 37, :end-column 10, :protocol play-cljs.core/Game, :doc "Renders the provided data structure.", :arglists (quote ([game content]))}, :protocol play-cljs.core/Game, :name play-cljs.core/render, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 10, :method-params ([game content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([game content])), :doc "Renders the provided data structure."}, load-tiled-map {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 43, :column 4, :end-line 43, :end-column 18, :protocol play-cljs.core/Game, :doc "Loads a tiled map. Returns a [TiledMap](#TiledMap) object.\nA tiled map with the provided name must already be loaded\n(see the TiledMap docs for details).", :arglists (quote ([game map-name]))}, :protocol play-cljs.core/Game, :name play-cljs.core/load-tiled-map, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 18, :method-params ([game map-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 43, :max-fixed-arity 2, :fn-var true, :arglists (quote ([game map-name])), :doc "Loads a tiled map. Returns a [TiledMap](#TiledMap) object.\nA tiled map with the provided name must already be loaded\n(see the TiledMap docs for details)."}, set-screen {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 49, :column 4, :end-line 49, :end-column 14, :protocol play-cljs.core/Game, :doc "Sets the [Screen](#Screen) object to be displayed.", :arglists (quote ([game screen]))}, :protocol play-cljs.core/Game, :name play-cljs.core/set-screen, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 14, :method-params ([game screen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 49, :max-fixed-arity 2, :fn-var true, :arglists (quote ([game screen])), :doc "Sets the [Screen](#Screen) object to be displayed."}, get-total-time {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 55, :column 4, :end-line 55, :end-column 18, :protocol play-cljs.core/Game, :doc "Returns the total time transpired since the game started, in milliseconds.", :arglists (quote ([game]))}, :protocol play-cljs.core/Game, :name play-cljs.core/get-total-time, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 18, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game])), :doc "Returns the total time transpired since the game started, in milliseconds."}, halign->constant {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 86, :column 7, :end-line 86, :end-column 23, :arglists (quote ([renderer halign]))}, :name play-cljs.core/halign->constant, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 23, :method-params ([renderer halign]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 2, :fn-var true, :arglists (quote ([renderer halign]))}, get-renderer {:protocol-inline nil, :meta {:file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :line 51, :column 4, :end-line 51, :end-column 16, :protocol play-cljs.core/Game, :doc "Returns the internal renderer object.", :arglists (quote ([game]))}, :protocol play-cljs.core/Game, :name play-cljs.core/get-renderer, :variadic false, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :end-column 16, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game])), :doc "Returns the internal renderer object."}, t_play_cljs$core12215 {:num-fields 7, :protocols #{play-cljs.core/Game cljs.core/IMeta cljs.core/IWithMeta}, :name play-cljs.core/t_play_cljs$core12215, :file "/home/freddy/.boot/cache/tmp/home/freddy/Dev/clojure/snakeweek/61u/-t6vmmz/public/main.out/play_cljs/core.cljs", :type true, :anonymous true, :column 5, :line 381, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}}, :cljs.spec/registry-ref [], :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:y :max-b :baseline :bezier :bold :hsb setup-finished? :tiled-map :stroke :grayscale :animation :screen :delta-time :color :arc :z2 height :triangle :bottom :pressed-keys :y3 :else :max-a hidden-state-atom :valign :top :assets :default meta12216 :leading :name :sy :fill :value :x4 :y1 :max-h :rgb :width :start :recur :colors :max-s :duration :max-g :points :normal :canvas :font :size :center :style :max-r :div :z1 :x3 :stop width :line preloads :scale-y :quad :shape :ellipse renderer :curve :z4 :right :total-time :image :sx :point :z3 :x :x1 :tag :contour :y4 :scale-x js/p5 :y2 :hierarchy :italic :rect :swidth :listeners :sheight :x2 :flip-x :height :halign :flip-y :left :text}, :order [:x :y :scale-x :scale-y :size :font :halign :valign :leading :style :left :baseline :normal :sx :sy :max-r :max-g :max-b :max-a :max-h :max-s :center :right :top :bottom :italic :bold :hierarchy :default :div :text :value :arc :width :height :start :stop :ellipse :line :x1 :y1 :x2 :y2 :point :quad :x3 :y3 :x4 :y4 :rect :triangle :image :swidth :flip-x :sheight :flip-y :name :animation :duration :fill :grayscale :color :colors :else :stroke :bezier :z3 :z2 :z1 :z4 :curve :rgb :hsb :tiled-map :shape :points :contour :screen :canvas :listeners :total-time :delta-time :pressed-keys :assets :recur width height renderer :tag js/p5 hidden-state-atom setup-finished? preloads meta12216]}, :doc nil}